import qualified Waterfall
import Linear
import Control.Lens ((^.), (.~))
import Data.Function ((&))
import Waterfall.SVG (parsePath)
import Control.Monad (sequence)

-- This code makes heavy use of a module called "Waterfall.SVG"
-- I plan on including this into the opencascade-hs monorepo, however need to clean it up first
-- Until I've done so, running this will be moderately difficult

-- print two of these, one of them mirrored, and then glue them back to back
-- to get a more symetrical ornament

gleamLogo :: Bool -> Waterfall.Solid
gleamLogo isHappy = 
    let Right outerPath = 
            parsePath "M 918.91,20.3875 C 823.73052,31.762023 798.53485,129.39876 772.78911,205.5255 728.79389,323.94398 692.5671,445.71265 643.36666,561.88867 595.09762,632.54828 503.19634,641.9573 430.78299,676.93325 328.83274,720.11518 221.26781,752.0255 123.42074,803.46313 37.339523,866.09309 53.132888,1007.4821 145.19617,1056.206 c 116.85445,91.8878 239.33024,177.3606 352.48708,273.4702 52.50768,67.6644 32.97582,158.0662 43.88759,237.7637 7.08401,103.7706 10.46102,207.8922 19.95426,311.4346 19.00609,110.4394 168.07371,155.5556 248.17906,79.8688 120.07735,-82.0295 238.91934,-165.9806 359.75864,-246.8245 83.1657,-42.5775 170.54,10.0648 254.1835,24.833 107.8604,24.9025 213.6467,62.2241 323.0331,78.0392 106.8818,-0.1 176.2921,-123.8095 131.0857,-217.3491 -40.4156,-142.9711 -89.1771,-284.0559 -124.1076,-428.2682 -2.6922,-85.699 66.3515,-147.1905 104.3811,-218.10714 55.3062,-88.1887 113.9876,-174.41876 167.1717,-263.83739 49.4664,-100.14426 -44.2286,-225.00384 -153.696,-210.33823 -150.5783,-5.78233 -301.948,-2.97847 -452.0065,-14.41732 C 1337.3592,438.5179 1299.9635,354.03526 1244.2823,296.03172 1177.4688,216.25107 1113.4427,134.0088 1044.816,55.829498 1011.4984,24.859787 963.31836,12.216811 918.91,20.3875 Z"
        
        Right innerPath = 
            parsePath "M 932.34,96.6134 c 65.05335,-5.157376 90.7751,65.75546 130.4471,104.70231 80.9572,95.75346 156.7666,196.22159 241.3284,288.67696 83.3663,77.22163 201.5827,52.87508 304.7259,60.53885 100.8131,3.96329 202.169,1.77869 302.6178,9.86688 78.6844,26.13094 39.5096,109.14546 3.0842,154.02414 -73.5697,118.13202 -153.3203,232.75421 -222.6349,353.30466 -47.8333,103.1065 11.8687,208.0499 36.4344,308.5087 27.2929,96.8999 60.6474,192.4096 83.8917,290.238 -0.7602,82.8896 -91.8282,71.4007 -145.8909,50.6686 -135.1868,-33.3329 -268.9554,-73.6186 -405.1217,-102.1592 -112.826,-13.517 -194.2169,75.599 -282.21431,129.9591 -83.91958,55.9699 -164.65782,117.2554 -250.71107,169.6602 -79.02277,25.0437 -96.40457,-64.9896 -93.28232,-122.8057 -9.98107,-138.7204 -12.86397,-278.2421 -27.72646,-416.4134 C 585.29208,1263.8747 475.28288,1214.1278 396.3233,1147.3329 317.17342,1084.9744 233.96234,1027.2819 157.53013,961.801 109.31957,894.35976 189.90126,850.28389 245.73666,835.32616 374.76121,782.91651 506.72244,736.97175 633.72354,680.10302 733.0703,624.75256 746.49637,504.83734 785.73535,409.14079 820.69895,314.66725 849.93866,217.74969 888.73042,124.91072 898.70995,110.15773 914.75639,99.621439 932.335,96.6154 Z"
        logoOuter = mconcat . fmap (Waterfall.prism 3 . Waterfall.fromPath) $ outerPath
        
        Right facePathsRegular = fmap mconcat . sequence $
                [ parsePath "M 1423.7,1032.45 c 30.5013,-4.94 56.3959,-29.6722 62.962,-59.82778 7.1579,-29.74884 -5.1141,-62.9729 -30.0071,-80.80645 -24.1466,-18.26209 -58.9873,-20.33401 -85.1855,-5.20325 -27.2794,14.97537 -43.6521,47.25107 -39.4003,78.11202 3.3296,30.14188 25.8589,56.88416 54.9086,65.47576 11.8325,3.6609 24.5309,4.4196 36.7223,2.2497 z"
                , parsePath "M 1042.09,1126.57 c -20.6063,7.3119 -31.4796,33.0161 -22.4497,52.914 14.1243,36.3887 50.2212,62.7958 89.1773,65.2365 38.9025,3.2657 78.4816,-17.5757 97.7561,-51.5249 9.9057,-17.3683 15.6711,-37.8045 13.5461,-57.8484 -3.2086,-21.8602 -26.7945,-37.5481 -48.1976,-32.1 -18.4502,3.7621 -31.9395,21.7921 -31.358,40.4498 -1.3454,14.6655 -17.8273,25.2061 -31.7015,20.081 -8.3238,-2.5012 -13.9904,-9.9141 -16.6457,-17.9002 -8.7157,-18.0695 -31.5301,-26.882 -50.127,-19.3078 z"
                , parsePath "M 790.631,1144.08 c 30.50111,-4.946 56.39882,-29.6744 62.96794,-59.8317 7.16225,-29.7497 -5.11405,-62.9743 -30.0075,-80.8078 -24.14714,-18.26155 -58.98758,-20.33183 -85.1857,-5.20127 -27.2794,14.97477 -43.65199,47.25107 -39.39704,78.11157 3.32862,30.1411 25.85547,56.8828 54.90302,65.4776 11.8312,3.6618 24.52875,4.4216 36.71928,2.2516 z"
                ]

        Right facePathsHappy = fmap mconcat . sequence $
                [ parsePath "M 1443.83,836.581 c -12.0096,3.95669 -20.3493,13.90481 -30.0697,21.46643 -20.686,17.67789 -41.702,34.9904 -62.1755,52.90369 -14.841,14.58052 -14.9551,40.7322 -0.2436,55.44285 9.1526,9.88199 22.8828,12.21185 34.8131,17.20449 25.7392,9.36611 51.3196,19.20794 77.1619,28.26574 21.2193,6.1499 45.2976,-8.7789 49.2215,-30.52153 4.6579,-19.8805 -8.5479,-41.34576 -28.1126,-46.75542 -8.6484,-3.19142 -17.2967,-6.38283 -25.9451,-9.57425 9.1605,-8.01788 18.8984,-15.41755 27.5922,-23.93581 14.9295,-16.07246 12.5751,-44.02258 -4.7788,-57.40925 -10.2621,-8.48425 -24.8206,-11.23857 -37.4734,-7.08694Z"
                , parsePath "M 1042.09,1126.57 c -20.6063,7.3119 -31.4796,33.0161 -22.4497,52.914 14.1243,36.3887 50.2212,62.7958 89.1773,65.2365 38.9025,3.2657 78.4816,-17.5757 97.7561,-51.5249 9.9057,-17.3683 15.6711,-37.8045 13.5461,-57.8484 -3.2086,-21.8602 -26.7945,-37.5481 -48.1976,-32.1 -18.4502,3.7621 -31.9395,21.7921 -31.358,40.4498 -1.3454,14.6655 -17.8273,25.2061 -31.7015,20.081 -8.3238,-2.5012 -13.9904,-9.9141 -16.6457,-17.9002 -8.7157,-18.0695 -31.5301,-26.882 -50.127,-19.3078 z"
                , parsePath "M 687.713,969.904 c -21.35984,0.30276 -39.81864,20.17487 -38.403,41.536 0.34075,17.3703 13.33506,32.7831 29.8744,37.3445 8.33653,3.0752 16.67307,6.1503 25.0096,9.2255 -9.16984,8.0272 -18.92538,15.4278 -27.62058,23.9636 -15.02641,16.208 -12.48885,44.448 5.20166,57.7047 15.1577,12.5814 39.13771,11.0924 53.00584,-2.7371 25.10844,-21.3334 50.36773,-42.4958 75.38105,-63.9369 15.30776,-14.0883 16.28165,-40.2245 2.05425,-55.4062 -9.09251,-10.6348 -23.38275,-13.0368 -35.69772,-18.16918 -25.73179,-9.36517 -51.30743,-19.19721 -77.14037,-28.26 -3.79805,-0.99213 -7.7427,-1.41974 -11.66513,-1.26492 z"
                ]
        facePaths = if isHappy then facePathsHappy else facePathsRegular

        logoInner = Waterfall.translate (unit _z ^* 1.5) .  mconcat . fmap (Waterfall.prism 3 . Waterfall.fromPath) $ innerPath

        logoFace = mconcat . fmap (Waterfall.prism 3 . Waterfall.fromPath) $ facePaths

        rawLogo = (logoOuter `Waterfall.difference` logoInner) <> logoFace

        Just (lo, hi) = Waterfall.axisAlignedBoundingBox rawLogo
        scale = 30 / (hi ^. _x - lo ^. _x) 
        scaledLogo = rawLogo &
            Waterfall.translate ((negate ((lo + hi)/2)) & _z .~ 0)  &
            Waterfall.scale (V3 scale scale 1)
    in scaledLogo

circle :: Waterfall.Path2D
circle = Waterfall.pathFrom (unit _x)
                [ Waterfall.arcViaTo (unit _y) (negate $ unit _x)
                , Waterfall.arcViaTo (negate $ unit _y) (unit _x)
                ]

ornament :: Bool -> Waterfall.Solid
ornament isHappy = 
    let rawHoop = Waterfall.sweep (Waterfall.fromPath2D . Waterfall.uScale2D 3 $ circle) (Waterfall.fromPath circle)
        hoopClipped = rawHoop `Waterfall.intersection` (Waterfall.centeredCube & Waterfall.translate (unit _z ^* 0.5) & Waterfall.uScale 10)
        hoopPositioned = hoopClipped 
            & Waterfall.translate (unit _x ^* 11)
            & Waterfall.rotate (unit _z) (-19*pi/60)
    in hoopPositioned <> gleamLogo isHappy


main :: IO ()
main = do
    Waterfall.writeSTL 0.1 "gleam-ornament.stl" (ornament False)
    Waterfall.writeSTL 0.1 "gleam-ornament-happy.stl" (ornament True)
